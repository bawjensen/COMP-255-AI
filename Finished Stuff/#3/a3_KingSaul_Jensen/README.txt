*NOTE: I have not commented the source as I should/would have. I do not know if this is a priority and did not have the time in the end to commit to this portion. I can do so if needed, but for now will rest on the hopes that my code is more or less self-explanitory.

=================================================================

	Folder containing all the components to play checkers against the computer. Machine implements a game tree with alpha-beta pruning and a static evaluator favoring edge places over middle.

=================================================================

FILES:

board.py:
	Module containing Board class for checkers implementation. Class contains much of the functionality of playing checkers against the computer.

minmax-alphabeta.py:
	Module containing min, max functions which inplement alpha-beta pruning and a computer-move caller for the recursive functions (min_value and max_value).

KingSaul_main.py:
	Module containing main() function to implement both the Board class and the game tree functions. Note: There is no "game-tree" as such - tree is implemented inside the Board classes with each containing their children once generated by method call.

=================================================================

Notes on design/implementation:

-	Simple static evaluator used to speed play, as many evaluations are performed at higher difficulties even with alpha-beta pruning. Also, lower "difficulty" gameplay (read: ply or depth) is already sufficiently sophisticated/challenging for huamns. Static_eval may be rewritten for computer v computer play.

-	Design is implemented for speed and not legibility. Movement was handled entirely in the frame of mind of Chinook numbers and not once were rows, columns or a mix used to calculate moves or jumps, with those being calculated once, at the initialization of the first board, and stored as class variables.

-	Width of board and number of pieces per player is variable and settable in the constructor/initialize methods, respectively. Nothing is hard-coded with respects to Chinook numbers.

-	Double-jumping has not been implemented as of yet because it would require much ground-work and pre-calculation in the init phase as to not cause the entire movePiece method to become unreadable. WIP.